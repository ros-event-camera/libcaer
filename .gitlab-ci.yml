variables:
  GIT_SUBMODULE_STRATEGY: normal
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}"
  PROJECT_NAME: "libcaer"

default:
  interruptible: true

.version_name: &version_name
  - export VERSION_NAME=$([[ -z "${RELEASE_VERSION}"  ]] && echo "${CI_COMMIT_TAG}" || echo "${RELEASE_VERSION}")

.change_build_dir: &change_build_dir
  - rm -Rf build
  - mkdir build
  - cd build

.ubuntu_curr_builder: &ubuntu_curr_builder
  stage: build
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:rolling
  # Variables is not getting merged, so we use before_script to set CCACHE vars.
  before_script:
    - export CCACHE_DIR="${CI_PROJECT_DIR}/.ccache"
    - export CCACHE_BASEDIR="${CI_PROJECT_DIR}"
    - export CCACHE_COMPILERCHECK="content"
  script:
    - *change_build_dir
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    - make -j1 -s
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .ccache
    policy: pull-push

sonarcloud_analysis:
  <<: *ubuntu_curr_builder
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:rolling
  tags:
    - docker
    - ubuntu
    - build
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  script:
    - *change_build_dir
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    # Run the build inside the build wrapper
    - /build-wrapper/build-wrapper-linux-x86-64 --out-dir bw-output make -j4
    # Run the sonar-scanner CLI command
    - cd ..
    - /sonar-scanner/bin/sonar-scanner
  rules:
    - if: $CI_PROJECT_NAME != "$PROJECT_NAME-internal"
      when: never
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .sonar/cache
      - .sonar/c-cache
      - .ccache
    policy: pull-push

build_macos_intel:
  stage: build
  tags:
    - macos
    - build
    - x86_64
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/.ccache"
    CCACHE_BASEDIR: "${CI_PROJECT_DIR}"
    CCACHE_COMPILERCHECK: "content"
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin"
    CC: clang-llvm
    CXX: clang++-llvm
  script:
    - *change_build_dir
    - arch -x86_64 /usr/local/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    - make -j4
    - if [[ "${CI_PROJECT_NAME}" != "${PROJECT_NAME}-internal" ]] ; then exit 0; fi
    - if [[ "${CI_COMMIT_BRANCH}" != "master" ]] ; then exit 0; fi
    - rm -Rf /usr/local/lib/${PROJECT_NAME}.so* /usr/local/include/${PROJECT_NAME}/ /usr/local/include/${PROJECT_NAME}cpp/ /usr/local/lib/cmake/${PROJECT_NAME}/ /usr/local/share/caer/
    - make install
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .ccache
    policy: pull-push

build_macos_arm:
  stage: build
  tags:
    - macos
    - build
    - arm
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/.ccache"
    CCACHE_BASEDIR: "${CI_PROJECT_DIR}"
    CCACHE_COMPILERCHECK: "content"
    PATH: "/opt/homebrew/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin"
    CC: clang-llvm
    CXX: clang++-llvm
  script:
    - *change_build_dir
    - /opt/homebrew/bin/cmake -DCMAKE_INSTALL_PREFIX=/opt/homebrew -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    - make -j4
    - if [[ "${CI_PROJECT_NAME}" != "${PROJECT_NAME}-internal" ]] ; then exit 0; fi
    - if [[ "${CI_COMMIT_BRANCH}" != "master" ]] ; then exit 0; fi
    - rm -Rf /opt/homebrew/lib/${PROJECT_NAME}.so* /opt/homebrew/include/${PROJECT_NAME}/ /opt/homebrew/include/${PROJECT_NAME}cpp/ /opt/homebrew/lib/cmake/${PROJECT_NAME}/ /opt/homebrew/share/caer/
    - make install
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .ccache
    policy: pull-push

build_windows:
  stage: build
  tags:
    - windows
    - build
  variables:
    MSYSTEM: MINGW64
    CCACHE_COMPILERCHECK: "content"
    CC: clang
    CXX: clang++
  before_script:
    # Workaround for https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4524
    - export CCACHE_DIR="$(pwd)/.ccache"
    - export CCACHE_BASEDIR="$(pwd)"
  script:
    - source /usr/bin/init-paths
    - *change_build_dir
    - cmake -G "MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=/mingw64 -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    - make -j8
    - if [[ "${CI_PROJECT_NAME}" != "${PROJECT_NAME}-internal" ]] ; then exit 0; fi
    - if [[ "${CI_COMMIT_BRANCH}" != "master" ]] ; then exit 0; fi
    - rm -Rf /mingw64/lib/${PROJECT_NAME}.dll* /mingw64/include/${PROJECT_NAME}/ /mingw64/include/${PROJECT_NAME}cpp/ /mingw64/lib/cmake/${PROJECT_NAME}/ /mingw64/share/caer/
    - make install
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .ccache
    policy: pull-push

basic_syntax_check_clang:
  variables:
    # Oldest supported clang compiler.
    CC: clang-9
    CXX: clang++-9
  <<: *ubuntu_curr_builder
  script:
    # Generate header files.
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 .
    # Check syntax.
    - find include/ -type f -iname '*.hpp' | sort -u > headers.txt
    - find include/ -type f -iname '*.h' | sort -u >> headers.txt
    - for h in $(cat headers.txt) ; do echo "\nChecking === ${h}\n\n" ; ${CXX} -std=c++17 -O2 -pipe "${h}" $(pkg-config --cflags opencv4) ; rm "${h}.gch" ; done

build_ubuntu_1804:
  variables:
    CC: gcc-10
    CXX: g++-10
  <<: *ubuntu_curr_builder
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:18.04

build_ubuntu_2004:
  variables:
    CC: gcc-10
    CXX: g++-10
  <<: *ubuntu_curr_builder
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:20.04

build_ubuntu_curr_gcc8:
  variables:
    CC: gcc-8
    CXX: g++-8
  <<: *ubuntu_curr_builder

build_ubuntu_curr_gcc9:
  variables:
    CC: gcc-9
    CXX: g++-9
  <<: *ubuntu_curr_builder

build_ubuntu_curr_gcc10:
  variables:
    CC: gcc-10
    CXX: g++-10
  <<: *ubuntu_curr_builder

build_ubuntu_curr_gcc11:
  variables:
    CC: gcc-11
    CXX: g++-11
  <<: *ubuntu_curr_builder

build_ubuntu_curr_clang9:
  variables:
    CC: clang-9
    CXX: clang++-9
  <<: *ubuntu_curr_builder

build_ubuntu_curr_clang11:
  variables:
    CC: clang-11
    CXX: clang++-11
  <<: *ubuntu_curr_builder

build_ubuntu_curr_clang12:
  variables:
    CC: clang-12
    CXX: clang++-12
  <<: *ubuntu_curr_builder

build_ubuntu_curr_clang13:
  variables:
    CC: clang-13
    CXX: clang++-13
  <<: *ubuntu_curr_builder

build_ubuntu_curr_gcc11_arm64:
  <<: *ubuntu_curr_builder
  tags:
    - docker
    - ubuntu
    - build
    - qemu
  variables:
    CC: gcc-11
    CXX: g++-11
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:rolling_arm64
  script:
    - *change_build_dir
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    - make -j4 -s
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

build_ubuntu_curr_gcc11_arm32:
  <<: *ubuntu_curr_builder
  tags:
    - docker
    - ubuntu
    - build
    - qemu
  variables:
    CC: gcc-11
    CXX: g++-11
    # TCMalloc and libunwind can cause hangs on ARM: https://bugzilla.redhat.com/show_bug.cgi?id=1226806
    UNW_ARM_UNWIND_METHOD: 4
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:rolling_arm32
  script:
    - *change_build_dir
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    - make -j4 -s
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

release_ubuntu_internal:
  stage: deploy
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:rolling
  interruptible: false
  before_script:
    - gpg --pinentry-mode loopback --passphrase "${PPA_GPG_KEY_PASS}" --import "${PPA_GPG_KEY}"
    - echo -e "5\ny\n" | gpg --no-tty --command-fd 0 --edit-key "${PPA_GPG_KEY_ID}" trust quit
  script:
    - git-archive-all "${PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz"
    - cd packaging/ubuntu-source-package/
    - ./packageUbuntu.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${CI_COMMIT_TAG}" --internal --distro bionic --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${CI_COMMIT_TAG}" --internal --distro focal --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${CI_COMMIT_TAG}" --internal --distro impish --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
  rules:
    - if: $CI_PROJECT_NAME != "${PROJECT_NAME}-internal"
      when: never
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+_internal[a-zA-Z0-9]*$/

release_archive_submodules:
  stage: deploy
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:rolling
  interruptible: false
  variables:
    GIT_STRATEGY: clone
  script:
    # Archive all the code, including git submodules and upload as generic package.
    - git-archive-all "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.zip"
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.zip" "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.zip"'
    - git-archive-all "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz"
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz" "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz"'
    # For open-source version, also upload to AWS S3 so build scripts can pick it up.
    - if [[ "${CI_PROJECT_NAME}" != "${PROJECT_NAME}" ]] ; then exit 0; fi
    - if [[ "${CI_COMMIT_TAG}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then true; else exit 0; fi
    - aws s3 cp "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.zip" "s3://release.inivation.com/libcaer/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.zip"
    - aws s3 cp "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz" "s3://release.inivation.com/libcaer/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.gz"
  rules:
    - if: $CI_COMMIT_TAG

pages:
  stage: deploy
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:rolling
  interruptible: false
  tags:
    - docker
    - ubuntu
    - build
  variables:
    GIT_STRATEGY: clone
  script:
    - cd docs
    - python3 docs-build.py "${CI_COMMIT_REF_NAME}" "${CI_DEFAULT_BRANCH}"
    - cp -R build ../public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
  resource_group: "${CI_JOB_NAME}"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - docs/build
    policy: pull-push

release_ubuntu:
  stage: deploy
  image: registry.gitlab.com/inivation/infra/docker-files/ubuntu:rolling
  interruptible: false
  needs: ["release_archive_submodules"]
  before_script:
    - gpg --pinentry-mode loopback --passphrase "${PPA_GPG_KEY_PASS}" --import "${PPA_GPG_KEY}"
    - echo -e "5\ny\n" | gpg --no-tty --command-fd 0 --edit-key "${PPA_GPG_KEY_ID}" trust quit
    - *version_name
  script:
    - cd packaging/ubuntu-source-package/
    - ./packageUbuntu.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${VERSION_NAME}" --distro bionic --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${VERSION_NAME}" --distro focal --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${VERSION_NAME}" --distro impish --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
  rules:
    - if: $CI_PROJECT_NAME != "${PROJECT_NAME}"
      when: never
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/
    - if: $CI_PIPELINE_SOURCE == "web" && $RELEASE == "Ubuntu" && $RELEASE_VERSION

release_fedora:
  stage: deploy
  image: registry.gitlab.com/inivation/infra/docker-files/fedora:latest
  interruptible: false
  needs: ["release_archive_submodules"]
  before_script:
    - mkdir -p ~/.config/
    - cp "${COPR_API_KEY}" ~/.config/copr
    - *version_name
  script:
    - cd packaging/fedora-source-package/
    - ./packageFedora.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${VERSION_NAME}"
    - copr-cli build --nowait inivation/inivation "${PROJECT_NAME}-${VERSION_NAME}-0.fc34.src.rpm"
  rules:
    - if: $CI_PROJECT_NAME != "${PROJECT_NAME}"
      when: never
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/
    - if: $CI_PIPELINE_SOURCE == "web" && $RELEASE == "Fedora" && $RELEASE_VERSION

release_gentoo_arch_brew:
  stage: deploy
  image: registry.gitlab.com/inivation/infra/docker-files/gentoo:latest
  interruptible: false
  needs: ["release_archive_submodules"]
  before_script:
    - mkdir -p ~/.ssh/
    - cp "${GITCI_SSH_KEY}" ~/.ssh/id_ed25519
    - chmod 0600 ~/.ssh/id_ed25519
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
    - cp "${GITCI_SSH_CONF}" ~/.gitconfig
    - *version_name
  script:
    - cd packaging/linux/
    # Gentoo release
    - ./gentoo-release.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${VERSION_NAME}" --pkg-category "dev-libs"
    # Arch release
    - ./arch-release.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${VERSION_NAME}"
    # Brew release
    - ./brew-release.sh --pkg-name "${PROJECT_NAME}" --pkg-version "${VERSION_NAME}"
  rules:
    - if: $CI_PROJECT_NAME != "${PROJECT_NAME}"
      when: never
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/
    - if: $CI_PIPELINE_SOURCE == "web" && $RELEASE == "GentooArchBrew" && $RELEASE_VERSION
